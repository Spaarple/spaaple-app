name: CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (PHP, Composer)
        run: |
          sudo apt-get update && sudo apt-get install -y curl git libzip-dev libwebp-dev libjpeg62-turbo-dev libpng-dev libxpm-dev
          curl -sSL https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      - name: Install PHP extensions
        run: |
          docker-php-ext-install exif mysqli pdo pdo_mysql zip gd  # Consider containerizing this step if necessary

      - name: Install project dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Cache vendor directory
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('composer.lock') }}

  validation:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Download security-checker
        run: |
          curl -L "https://github.com/fabpot/local-php-security-checker/releases/download/v${{ env.PHP_CHECKER_VERSION }}/local-php-security-checker_${{ env.PHP_CHECKER_VERSION }}_linux_amd64" -o security-checker

      - name: Make security-checker executable
        run: chmod +x security-checker

      - name: Run security checks
        run: ./security-checker --path=./composer.lock
        env:
          PHP_CHECKER_VERSION: 2.0.5  # Replace with your desired version

      - name: Setup MySQL service
        uses: actions/docker-compose@v2
        with:
          docker-compose.yml: .docker-compose.yml  # Adjust the path if necessary
          up-args: mysql

      - name: Install database dependencies (within container)
        run: |
          docker-compose exec mysql apt-get update && docker-compose exec mysql apt-get install -y git libzip-dev libwebp-dev libjpeg62-turbo-dev libpng-dev libxpm-dev

      - name: Install project dependencies (within container)
        run: |
          docker-compose exec php composer install --prefer-dist --no-interaction

      - name: Prepare database (within container)
        run: |
          docker-compose exec php php bin/console doctrine:database:drop --force
          docker-compose exec php php bin/console doctrine:database:create
          docker-compose exec php php bin/console doctrine:migration:migrate --no-interaction

      - name: Validate database schema (within container)
        run: docker-compose exec php php bin/console doctrine:schema:validate

  coding-standards:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Run Twig linting
        run: php bin/console lint:twig ./templates